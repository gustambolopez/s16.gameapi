import{hostname}from"node:os";import boxen from"boxen";import chalk from"chalk";import express from"express";import fetch from"node-fetch";import ora from"ora";import{api_graphql,Image,link_base,linksuffix}from"./value.js";const app=express(),port=parseInt(process.env.PORT,10)||8080,cachesearch=new Map,cacheduration=36e4,maxCacheSize=1e3;app.use(express.json()),app.use(((e,r,t)=>{if(r.setHeader("Access-Control-Allow-Origin","*"),r.setHeader("Access-Control-Allow-Methods","GET, POST, PUT, PATCH, OPTIONS"),r.setHeader("Access-Control-Allow-Headers","Content-Type, Accept"),"OPTIONS"===e.method)return r.sendStatus(204);t()}));const image_suffix="-512x512",image_suffixtwo="-512x384";function cleanupCache(){if(cachesearch.size<=1e3)return;const e=Array.from(cachesearch.entries());e.sort(((e,r)=>e[1].timestamp-r[1].timestamp));const r=e.slice(0,Math.floor(200));for(const[e]of r)cachesearch.delete(e)}async function checkstatus(e){try{const r=new AbortController,t=setTimeout((()=>r.abort()),3e3),o=await fetch(e,{method:"HEAD",signal:r.signal});return clearTimeout(t),o.ok?e:null}catch(r){return"AbortError"!==r.name&&console.error(`error in the image ${e}:`,r.message),null}}async function theresultlmao(e){const r=e.id,t=`${link_base}${r}${linksuffix}`,o=[`${Image}${r}-512x512.jpg`,`${Image}${r}-512x512.jpeg`,`${Image}${r}-512x384.jpg`,`${Image}${r}-512x384.jpeg`].map((e=>checkstatus(e))),s=await Promise.allSettled(o);let n=null;for(const e of s)if("fulfilled"===e.status&&e.value){n=e.value;break}const{id:a,...i}=e;return{...i,link:t,...n&&{img:n}}}app.get("/v0/api/games/q=:searchTerm",(async(e,r)=>{const t=new AbortController,o=setTimeout((()=>t.abort()),15e3);try{const o=String(e.params.searchTerm||"").trim();let s=parseInt(e.query.quantity,10)||21e3;const n=void 0!==e.query.sortBytitle;s>1e3&&(s=1e3);const a=`${o}-${s}-${n}`;if(cachesearch.has(a)){const e=cachesearch.get(a);if(Date.now()-e.timestamp<36e4)return console.log("loading from cache:",a),r.json(e.results);cachesearch.delete(a)}const i="\n      query SearchGames($search: String!, $hits: Int!) {\n        gamesSearched(input: { search: $search, hitsPerPage: $hits }) {\n          hits {\n            objectID\n            type\n            title\n            description\n            instruction\n            tags\n            categories\n            company\n            mobile\n            keyFeatures\n            slugs { name active }\n            publishedAt\n            lastPublishedAt\n            languages\n          }\n        }\n      }\n    ",c=await fetch(api_graphql,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Origin:"https://gamedistribution.com",Referer:"https://gamedistribution.com/"},body:JSON.stringify({query:i,variables:{search:o,hits:s}}),signal:t.signal});if(!c.ok){const e=await c.text();return console.error(`GraphQL error ${c.status}: ${e}`),r.status(c.status).json({error:`Fetch failed: ${e}`})}const l=await c.json();if(l.errors)return console.error("GraphQL returned errors:",l.errors),r.status(500).json({error:"GraphQL errors",details:l.errors});const h=l?.data?.gamesSearched?.hits??[],p=await Promise.all(h.map((e=>theresultlmao({id:e.objectID,...e,mobile:e.mobile?.map((e=>"ForIOS"===e?"IOS":"ForAndroid"===e?"Android":e))}))));if(0===p.length)return r.status(404).json({error:"no games found."});n&&p.sort(((e,r)=>e.title.localeCompare(r.title))),cleanupCache(),cachesearch.set(a,{results:p,timestamp:Date.now()}),console.log("Stored cache:",a),r.json(p)}catch(e){if(console.error("Fetch error:",e),"AbortError"===e.name)return r.status(408).json({error:"Request timeout"});r.status(500).json({error:"Server error",details:e.message})}finally{clearTimeout(o)}})),app.get("/v0/api/games/:id",(async(e,r)=>{const t=new AbortController,o=setTimeout((()=>t.abort()),15e3);try{const o=String(e.params.id||"").trim(),s="\n      query SearchGameById($search: String!) {\n        gamesSearched(input: { search: $search, hitsPerPage: 1 }) {\n          hits {\n            objectID\n            type\n            title\n            description\n            instruction\n            tags\n            categories\n            company\n            mobile\n            keyFeatures\n            slugs { name active }\n            publishedAt\n            lastPublishedAt\n            languages\n          }\n        }\n      }\n    ",n=await fetch(api_graphql,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Origin:"https://gamedistribution.com",Referer:"https://gamedistribution.com/"},body:JSON.stringify({query:s,variables:{search:o}}),signal:t.signal});if(!n.ok){const e=await n.text();return console.error(`GraphQL error ${n.status}: ${e}`),r.status(n.status).json({error:`Fetch failed: ${e}`})}const a=await n.json();if(a.errors)return console.error("GraphQL returned errors:",a.errors),r.status(500).json({error:"GraphQL errors",details:a.errors});const i=a?.data?.gamesSearched?.hits?.find((e=>e.objectID===o));if(!i)return r.status(404).json({error:"Game not found, is the ID correct or does it exist?"});const c=await theresultlmao({id:i.objectID,...i,mobile:i.mobile?.map((e=>"ForIOS"===e?"IOS":"ForAndroid"===e?"Android":e))});r.json([c])}catch(e){if(console.error("Fetch error:",e),"AbortError"===e.name)return r.status(408).json({error:"Request timeout"});r.status(500).json({error:"Server error",details:e.message})}finally{clearTimeout(o)}})),app.get("/health",((e,r)=>{r.json({status:"healthy",timestamp:(new Date).toISOString(),uptime:process.uptime(),cacheSize:cachesearch.size,memory:process.memoryUsage()})}));const DEV_MESSAGE=process.env.DEV_MESSAGE||'(Hosted on heaven previously altera, go check it here "https://discord.gg/qk4HmXf8tz"). to search something try /v0/api/games/q=(yoursearch)';app.get("/",((e,r)=>{r.send(DEV_MESSAGE)}));const spinner=ora("starting server...").start(),server=app.listen(port,(()=>{spinner.succeed("server started");const e=`\n${chalk.bold(chalk.hex("#059d4aff")("\n███████╗ ██╗ ██████╗     █████╗ ██████╗ ██╗\n██╔════╝███║██╔════╝    ██╔══██╗██╔══██╗██║\n███████╗╚██║███████╗    ███████║██████╔╝██║\n╚════██║ ██║██╔═══██╗   ██╔══██║██╔═══╝ ██║\n███████║ ██║╚██████╔╝██╗██║  ██║██║     ██║\n╚══════╝ ╚═╝ ╚═════╝ ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝\n\n"))}\n  ${chalk.bold(chalk.hex("#1E90FF")("local host:"))} http://localhost${80===port?"":`:${chalk.bold(port)}`}\n  ${chalk.bold(chalk.hex("#1E90FF")("system hostname:"))} http://${hostname()}${80===port?"":`:${chalk.bold(port)}`}\n  ${chalk.bold(chalk.hex("#1E90FF")("direct ip:"))} http://127.0.0.1${80===port?"":`:${chalk.bold(port)}`}\n`;console.log(boxen(e,{padding:1,borderColor:"green",borderStyle:"round"}))}));function logWithTime(e){console.log(`[${(new Date).toISOString()}] ${e}`)}function shutdown(){spinner.start("shutting down server..."),logWithTime(chalk.yellow("SIGTERM signal received: closing HTTP server")),server.close((()=>{logWithTime(chalk.green("server closed.")),spinner.succeed("server shutdown complete"),process.exit(0)}))}process.on("SIGINT",shutdown),process.on("SIGTERM",shutdown),process.on("uncaughtException",(e=>{spinner.fail("Uncaught Exception!"),console.error(boxen(chalk.red.bold("[UNCAUGHT EXCEPTION]"),{padding:1,borderColor:"red",borderStyle:"round"}),e),process.exit(1)})),process.on("unhandledRejection",(e=>{spinner.fail("Unhandled Rejection!"),console.error(boxen(chalk.red.bold("[UNHANDLED REJECTION]"),{padding:1,borderColor:"red",borderStyle:"round"}),e),process.exit(1)}));
