import boxen from"boxen";import chalk from"chalk";import express from"express";import fetch from"node-fetch";import ora from"ora";import{hostname}from"os";import{api_graphql,Image,link_base,linksuffix}from"./value.js";const app=express(),port=parseInt(process.env.PORT)||8080,cachesearch=new Map,cacheduration=36e4;app.use(express.json()),app.use(((e,r,t)=>{r.setHeader("Access-Control-Allow-Origin","*"),r.setHeader("Access-Control-Allow-Methods","GET, POST, PUT, PATCH, OPTIONS"),r.setHeader("Access-Control-Allow-Headers","Content-Type, Accept"),t()}));const image_suffix="-512x512",image_suffixtwo="-512x384";async function checkstatus(e){try{return(await fetch(e,{method:"HEAD",timeout:5e3})).ok?e:null}catch(r){return console.error(`error in the image ${e}:`,r.message),null}}async function theresultlmao(e){const r=e.id,t=`${link_base}${r}${linksuffix}`,o=[`${Image}${r}-512x512.jpg`,`${Image}${r}-512x512.jpeg`,`${Image}${r}-512x384.jpg`,`${Image}${r}-512x384.jpeg`];let s=null;for(const e of o)if(s=await checkstatus(e),s)break;const{id:n,...a}=e;return{...a,link:t,...s&&{img:s}}}app.get("/v0/api/games/q=:searchTerm",(async(e,r)=>{const t=e.params.searchTerm,o=parseInt(e.query.quantity)||21e3,s=void 0!==e.query.sortBytitle,n=`${t}-${o}-${s}`;if(cachesearch.has(n)){const e=cachesearch.get(n);if(Date.now()-e.timestamp<36e4)return console.log("loading from cache:",n),r.json(e.results);cachesearch.delete(n)}const a=`\n    query SearchGames {\n      gamesSearched(input: { search: "${t}", hitsPerPage: ${o} }) {\n        hits {\n          objectID\n          type\n          title\n          description\n          instruction\n          tags\n          categories\n          company\n          mobile\n          keyFeatures\n          slugs { name active }\n          publishedAt\n          lastPublishedAt\n          languages\n        }\n      }\n    }\n  `;try{const e=await fetch(api_graphql,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Origin:"https://gamedistribution.com",Referer:"https://gamedistribution.com/"},body:JSON.stringify({query:a})});if(!e.ok){const t=await e.text();return console.error(`GraphQL error ${e.status}: ${t}`),r.status(e.status).json({error:`Fetch failed: ${t}`})}const t=await e.json();if(t.errors)return console.error("GraphQL returned errors:",t.errors),r.status(500).json({error:"GraphQL errors",details:t.errors});const o=t?.data?.gamesSearched?.hits??[],i=await Promise.all(o.map((e=>theresultlmao({id:e.objectID,...e,mobile:e.mobile?.map((e=>"ForIOS"===e?"IOS":"ForAndroid"===e?"Android":e))}))));if(0===i.length)return r.status(404).json({error:"no games found."});s&&i.sort(((e,r)=>e.title.localeCompare(r.title))),cachesearch.set(n,{results:i,timestamp:Date.now()}),console.log("Stored cache:",n),r.json(i)}catch(e){console.error("Fetch error:",e),r.status(500).json({error:"Server error",details:e.message})}})),app.get("/v0/api/games/:id",(async(e,r)=>{const t=e.params.id,o=`\n    query SearchGames {\n      gamesSearched(input: { search: "${t}", hitsPerPage: 1 }) {\n        hits {\n          objectID\n          type\n          title\n          description\n          instruction\n          tags\n          categories\n          company\n          mobile\n          keyFeatures\n          slugs { name active }\n          publishedAt\n          lastPublishedAt\n          languages\n        }\n      }\n    }\n  `;try{const e=await fetch(api_graphql,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Origin:"https://gamedistribution.com",Referer:"https://gamedistribution.com/"},body:JSON.stringify({query:o})});if(!e.ok){const t=await e.text();return console.error(`GraphQL error ${e.status}: ${t}`),r.status(e.status).json({error:`Fetch failed: ${t}`})}const s=await e.json();if(s.errors)return console.error("GraphQL returned errors:",s.errors),r.status(500).json({error:"GraphQL errors",details:s.errors});const n=s?.data?.gamesSearched?.hits?.find((e=>e.objectID===t));if(!n)return r.status(404).json({error:"Game not found, is the ID correct or does it exist?"});const a=await theresultlmao({id:n.objectID,...n,mobile:n.mobile?.map((e=>"ForIOS"===e?"IOS":"ForAndroid"===e?"Android":e))});r.json([a])}catch(e){console.error("Fetch error:",e),r.status(500).json({error:"Server error",details:e.message})}}));const DEV_MESSAGE=process.env.DEV_MESSAGE||'(Hosted on heaven previously altera, go check it here "https://discord.gg/qk4HmXf8tz"). to search something try /v0/api/games/q=(yoursearch)';app.get("/",((e,r)=>{r.send(DEV_MESSAGE)}));const spinner=ora("starting server...").start(),server=app.listen(port,(()=>{spinner.succeed("server started");const e=`\n${chalk.bold(chalk.hex("#059d4aff")("\n\n███████╗ ██╗ ██████╗     █████╗ ██████╗ ██╗\n██╔════╝███║██╔════╝    ██╔══██╗██╔══██╗██║\n███████╗╚██║███████╗    ███████║██████╔╝██║\n╚════██║ ██║██╔═══██╗   ██╔══██║██╔═══╝ ██║\n███████║ ██║╚██████╔╝██╗██║  ██║██║     ██║\n╚══════╝ ╚═╝ ╚═════╝ ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝\n                                           \n"))}\n  ${chalk.bold(chalk.hex("#1E90FF")("local host:"))} http://localhost${80===port?"":":"+chalk.bold(port)}\n  ${chalk.bold(chalk.hex("#1E90FF")("system hostname:"))} http://${hostname()}${80===port?"":":"+chalk.bold(port)}\n  ${chalk.bold(chalk.hex("#1E90FF")("direct ip:"))} http://127.0.0.1${80===port?"":":"+chalk.bold(port)}\n`;console.log(boxen(e,{padding:1,borderColor:"green",borderStyle:"round"}))}));function logWithTime(e){console.log(`[${(new Date).toISOString()}] ${e}`)}function shutdown(){spinner.start("shutting down server..."),logWithTime(chalk.yellow("SIGTERM signal received: closing HTTP server")),server.close((()=>{logWithTime(chalk.green("server closed.")),spinner.succeed("server shutdown complete"),process.exit(0)}))}process.on("SIGINT",shutdown),process.on("SIGTERM",shutdown),process.on("uncaughtException",(e=>{spinner.fail("Uncaught Exception!"),console.error(boxen(chalk.red.bold("[UNCAUGHT EXCEPTION]"),{padding:1,borderColor:"red",borderStyle:"round"}),e),process.exit(1)})),process.on("unhandledRejection",(e=>{spinner.fail("Unhandled Rejection!"),console.error(boxen(chalk.red.bold("[UNHANDLED REJECTION]"),{padding:1,borderColor:"red",borderStyle:"round"}),e),process.exit(1)}));