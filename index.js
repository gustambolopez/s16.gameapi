import express from"express";import fetch from"node-fetch";import dotenv from"dotenv";dotenv.config();const app=express(),port=process.env.PORT||8080,searchCache=new Map,durationOfthecache=36e4;app.use(express.json());const API=process.env.API,BASE=process.env.BASE,linksuffix=process.env.linksuffix,Image=process.env.Image,image_suffix=process.env.image_suffix,image_suffixtwo=process.env.image_suffixtwo;async function checkstatus(e){try{return(await fetch(e,{method:"HEAD",timeout:5e3})).ok?e:null}catch(r){return console.error(`Error in the image ${e}:`,r.message),null}}async function theresultlmao(e){const r=e.id,s=`${BASE}${r}${linksuffix}`,t=[`${Image}${r}${image_suffix}.jpg`,`${Image}${r}${image_suffix}}.jpeg`,`${Image}${r}${image_suffix}}.png`,`${Image}${r}${image_suffix}}.webp`,`${Image}${r}${image_suffixtwo}.jpg`,`${Image}${r}${image_suffixtwo}.jpeg`,`${Image}${r}${image_suffixtwo}.png`,`${Image}${r}${image_suffixtwo}.webp`];let o=null;for(const e of t){const r=await checkstatus(e);if(r){o=r;break}}const a={...e,link:s};return o&&(a.img=o),a}app.get("/v0/api/games/q=:searchTerm",(async(e,r)=>{const s=e.params.searchTerm,t=parseInt(e.query.quantity)||21e3,o=void 0!==e.query.sortBytitle,a=`${s}-${t}-${o}`;if(searchCache.has(a)){const e=searchCache.get(a);if(Date.now()-e.timestamp<36e4)return console.log("loading from cache:",a),r.json(e.results);searchCache.delete(a)}const n=`\n        query GetSearchResults {\n            results(search: "${s}", limit: ${t}, offset: 0) {\n                title\n                id\n                description\n            }\n        }\n    `;try{const e=await fetch(API,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:n})});if(!e.ok){const s=await e.text();return console.error(`GraphQL error ${e.status}: ${s}`),r.status(e.status).json({error:`Fetch failed: ${s}`})}const s=await e.json();if(s.errors)return console.error("GraphQL returned errors:",s.errors),r.status(500).json({error:"GraphQL errors",details:s.errors});const t=Array.isArray(s?.data?.results)?await Promise.all(s.data.results.map((e=>theresultlmao(e)))):[];if(0===t.length)return r.status(404).json({error:"No games found for that search term try searching another one maybe"});o&&t.sort(((e,r)=>e.title.localeCompare(r.title))),searchCache.set(a,{results:t,timestamp:Date.now()}),console.log("Stored cache:",a),r.json(t)}catch(e){console.error("Fetch error:",e),r.status(500).json({error:"Server error",details:e.message})}})),app.get("/v0/api/games/:id",(async(e,r)=>{const s=e.params.id,t=`\n        query {\n            results(search: "${s}", limit: 1, offset: 0) {\n                title\n                id\n                description\n            }\n        }\n    `;try{const e=await fetch(API,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:t})});if(!e.ok){const s=await e.text();return console.error(`GraphQL error ${e.status}: ${s}`),r.status(e.status).json({error:`Fetch failed: ${s}`})}const o=await e.json();if(o.errors)return console.error("GraphQL returned errors:",o.errors),r.status(500).json({error:"GraphQL errors",details:o.errors});const a=o?.data?.results?.find((e=>e.id===s)),n=a?await theresultlmao(a):null;n?r.json([n]):r.status(404).json({error:"Game not found, is the ID correct or does it exist?"})}catch(e){console.error("Fetch error:",e),r.status(500).json({error:"Server error",details:e.message})}}));const DEV_MESSAGE=process.env.DEV_MESSAGE||'(Hosted on heaven previously altera, go check it here "https://discord.gg/qk4HmXf8tz"). to search something try /v0/api/games/q=(yoursearch)';app.get("/",((e,r)=>{r.send(DEV_MESSAGE)})),app.listen(port,(()=>{console.log(`Listening on http://localhost:${port}`)}));