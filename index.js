import express from"express";import fetch from"node-fetch";import{hostname}from"os";const app=express(),port=process.env.PORT||8080,cachesearch=new Map,cacheduration=36e4;app.use(express.json()),app.use(((e,r,t)=>{r.setHeader("Access-Control-Allow-Origin","*"),r.setHeader("Access-Control-Allow-Methods","GET, POST, PUT, PATCH, OPTIONS"),r.setHeader("Access-Control-Allow-Headers","Content-Type, Accept"),t()}));import{api_graphql,link_base,linksuffix,Image}from"./value.js";const image_suffix="-512x512",image_suffixtwo="-512x384";async function checkstatus(e){try{return(await fetch(e,{method:"HEAD",timeout:5e3})).ok?e:null}catch(r){return console.error(`Error in the image ${e}:`,r.message),null}}async function theresultlmao(e){const r=e.id,t=`${link_base}${r}${linksuffix}`,s="-512x512",o="-512x384",a=[`${Image}${r}${s}.jpg`,`${Image}${r}${s}.jpeg`,`${Image}${r}${s}.png`,`${Image}${r}${s}.webp`,`${Image}${r}${o}.jpg`,`${Image}${r}${o}.jpeg`,`${Image}${r}${o}.png`,`${Image}${r}${o}.webp`];let n=null;for(const e of a){const r=await checkstatus(e);if(r){n=r;break}}const{id:i,...c}=e,l={...c,link:t};return n&&(l.img=n),l}app.get("/v0/api/games/q=:searchTerm",(async(e,r)=>{const t=e.params.searchTerm,s=parseInt(e.query.quantity)||21e3,o=void 0!==e.query.sortBytitle,a=`${t}-${s}-${o}`;if(cachesearch.has(a)){const e=cachesearch.get(a);if(Date.now()-e.timestamp<36e4)return console.log("loading from cache:",a),r.json(e.results);cachesearch.delete(a)}const n=`\n        query SearchGames {\n            gamesSearched(input: { search: "${t}", hitsPerPage: ${s} }) {\n                hits {\n                    objectID\n                    type\n                    title\n                    description\n                    instruction\n                    tags\n                    categories\n                    company\n                    mobile\n                    keyFeatures\n                    slugs {\n                        name\n                        active\n                    }\n                    publishedAt\n                    lastPublishedAt\n                    languages\n                }\n            }\n        }\n    `;try{const e=await fetch(api_graphql,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Origin:"https://gamedistribution.com",Referer:"https://gamedistribution.com/"},body:JSON.stringify({query:n})});if(!e.ok){const t=await e.text();return console.error(`GraphQL error ${e.status}: ${t}`),r.status(e.status).json({error:`Fetch failed: ${t}`})}const t=await e.json();if(t.errors)return console.error("GraphQL returned errors:",t.errors),r.status(500).json({error:"GraphQL errors",details:t.errors});const s=Array.isArray(t?.data?.gamesSearched?.hits)?await Promise.all(t.data.gamesSearched.hits.map((e=>theresultlmao({id:e.objectID,...e,mobile:e.mobile?.map((e=>"ForIOS"===e?"IOS":"ForAndroid"===e?"Android":e))})))):[];if(0===s.length)return r.status(404).json({error:"No games found for that search term try searching another one maybe"});o&&s.sort(((e,r)=>e.title.localeCompare(r.title))),cachesearch.set(a,{results:s,timestamp:Date.now()}),console.log("Stored cache:",a),r.json(s)}catch(e){console.error("Fetch error:",e),r.status(500).json({error:"Server error",details:e.message})}})),app.get("/v0/api/games/:id",(async(e,r)=>{const t=e.params.id,s=`\n        query SearchGames {\n            gamesSearched(input: { search: "${t}", hitsPerPage: 1 }) {\n                hits {\n                    objectID\n                    type\n                    title\n                    description\n                    instruction\n                    tags\n                    categories\n                    company\n                    mobile\n                    keyFeatures\n                    slugs {\n                        name\n                        active\n                    }\n                    publishedAt\n                    lastPublishedAt\n                    languages\n                }\n            }\n        }\n    `;try{const e=await fetch(api_graphql,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Origin:"https://gamedistribution.com",Referer:"https://gamedistribution.com/"},body:JSON.stringify({query:s})});if(!e.ok){const t=await e.text();return console.error(`GraphQL error ${e.status}: ${t}`),r.status(e.status).json({error:`Fetch failed: ${t}`})}const o=await e.json();if(o.errors)return console.error("GraphQL returned errors:",o.errors),r.status(500).json({error:"GraphQL errors",details:o.errors});const a=o?.data?.gamesSearched?.hits?.find((e=>e.objectID===t)),n=a?await theresultlmao({id:a.objectID,...a,mobile:a.mobile?.map((e=>"ForIOS"===e?"IOS":"ForAndroid"===e?"Android":e))}):null;n?r.json([n]):r.status(404).json({error:"Game not found, is the ID correct or does it exist?"})}catch(e){console.error("Fetch error:",e),r.status(500).json({error:"Server error",details:e.message})}}));const DEV_MESSAGE=process.env.DEV_MESSAGE||'(Hosted on heaven previously altera, go check it here "https://discord.gg/qk4HmXf8tz"). to search something try /v0/api/games/q=(yoursearch)';let server;function shutdown(){console.log("SIGTERM signal received: closing HTTP server"),server.close((()=>{console.log("https server closed."),process.exit(0)}))}app.get("/",((e,r)=>{r.send(DEV_MESSAGE)})),process.on("SIGINT",shutdown),process.on("SIGTERM",shutdown),server=app.listen(port,(()=>{const e=server.address();console.log("Listening on:"),console.log(`\thttp://localhost:${e.port}`),console.log(`\thttp://${hostname()}:${e.port}`),console.log(`\thttp://${"IPv6"===e.family?`[${e.address}]`:e.address}:${e.port}`)}));